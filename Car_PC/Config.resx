<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAMDAAAAEAIACoJQAAFgAAACgAAAAwAAAAYAAAAAEAIAAAAAAAACQAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIUFBQEHh4eBCcn
        JwROTk4CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AAAAAAAAAAAAAAAAAACqqqoAiIiIAre3twKsrKwCqqqqALa2tgLGxsYC8fHxAvj4/wKAgP8CAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAACgAKAC8AB8AyQAAACMAUFBZAD4+qgAAAKoAAACRAAAAgAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgICAALe3twCsrKwAqqqqALa2tgDGxsYA8fHxAPj4
        /wCAgP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////8AAP///////wAA////////
        AAD///////8AAP///////wAA///j////AAD//gD///8AAP/AAH///wAA/AAAP///AAD4AAAf//8AAPAA
        AAP//wAAwAAAAD//AADAAAAAB/8AAIAAAAAAHwAAgAAAAAAHAACAAAAAAAMAAIAAAAAAAwAAwAAAAAAD
        AADAAAAAAAMAAOAAAAAAAwAA8AAAAAABAAD8AAAAAAEAAP+AAAAAAQAA//AAAAABAAD//gAAAAEAAP//
        AAAAAwAA//8AAAAPAAD//+ABAD8AAP//8AP//wAA////////AAD///////8AAP///////wAA////////
        AAD///////8AAP///////wAA////////AAD///////8AAP///////wAA////////AAD///////8AAP//
        /////wAA////////AAD///////8AAP///////wAA////////AAD///////8AAP///////wAA////////
        AAA=
</value>
  </data>
</root>